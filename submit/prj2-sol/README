Name:		Andrew Goetz
B-Number:	B00780086
Email:		agoetz3@binghamton.edu

Details:
There are 2 sets of pipes accessible to the parent: p2c_pipes, which is used to write to the child, and c2p_pipes, which is used to read the result the child writes on the pipe.

Train data is read before fork() is called so children have their own copy, but test_data must be sent to the child by the parent each time.

First, the parent sends the size of the data, n, to the children via the pipe. Then, the loop begins. The parent writes an array of 785 bytes to the children each run: index 0 holds the label of test_data[i], and the rest of the array holds the features vector from test_data[i].

The child reads this data, call the knn function, and returns a 10 byte array to the parent: index 0-7 holds the nearest_index value, index 8 holds the predicted label, and index 9 holds the expected label.

On normal program execution, waitpid() is called at the end of main for each child process (their PIDs are stored whenever fork is called in a vector).

On error in parent process, kill_children() is called and all child processes are sent a SIGTERM signal. Parent process then exits.

On error in a child process, the child sends a SIGTERM signal to parent process. This signal is then recieved by the parent function, sending it to the kill_children() function, which kills all child processes before terminating parent as well.

This error function will be invoked whenever there is an error with a read() or write() to a pipe, or a fork(), since these are the main errors that would make the program output incorrect results. The process that recieves this error also panics as well.
